/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package av.imageview;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.util.TiRHelper;
import org.appcelerator.titanium.util.TiRHelper.ResourceNotFoundException;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.view.TiCompositeLayout;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutArrangement;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutParams;
import org.appcelerator.titanium.view.TiDrawableReference;
import org.appcelerator.titanium.view.TiUIView;

import android.app.Activity;
import android.graphics.drawable.Drawable;
import android.view.View;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.support.v4.content.ContextCompat;
import android.support.v4.content.res.ResourcesCompat;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.resource.drawable.GlideDrawable;
import com.bumptech.glide.request.RequestListener;
import com.bumptech.glide.request.target.Target;

@Kroll.proxy(creatableInModule=ImageviewAndroidModule.class)
public class ImageViewProxy extends TiViewProxy
{
	// Standard Debugging variables
	private static final String LCAT = "AVImageViewProxy";
	private static final boolean DBG = TiConfig.LOGD;

	private String image;
	private String defaultImage;
	private String brokenLinkImage;
	private String scaleType;

	private Boolean memoryCacheEnabled;
	private Boolean loadingIndicatorEnabled;

	private class ExtendedImageView extends TiUIView
	{
		private TiCompositeLayout layout;
		private ImageView imageView;
		private ProgressBar progressBar;

		public ExtendedImageView(TiViewProxy proxy) {
			super(proxy);

			//Setting up layout and imageview
			layout = new TiCompositeLayout(proxy.getActivity());
			imageView = new ImageView(proxy.getActivity());

			if (scaleType == null)
				setScaleType(ImageviewAndroidModule.CONTENT_MODE_ASPECT_FILL);

			if (memoryCacheEnabled == null)
				setMemoryCacheEnabled(false);

			//Setting up progress indicator if desired (enabled by default)
			if (loadingIndicatorEnabled) {
				try {
					progressBar = new ProgressBar(proxy.getActivity(), null, TiRHelper.getAndroidResource("attr.progressBarStyleSmall"));
					//progressBar.setProgressDrawable(ContextCompat.getDrawable(TiRHelper.getApplicationResource("drawable.circular_progress")));
					progressBar.setProgressDrawable(ContextCompat.getDrawable(proxy.getActivity().getBaseContext(), TiRHelper.getApplicationResource("drawable.circular_progress")));
					progressBar.setVisibility(View.VISIBLE);

					layout.addView(imageView);
					layout.addView(progressBar);
				} catch (ResourceNotFoundException e) {
					e.printStackTrace();
				}

				setNativeView(layout);
			} else
				setNativeView(imageView);
		}

		@Override
		public void processProperties(KrollDict d) {
			super.processProperties(d);

			if (d.containsKey("image"))
				setImage(TiConvert.toString(proxy.getProperty("image")));
			if (d.containsKey("scaleType"))
				setScaleType(TiConvert.toString(proxy.getProperty("scaleType")));
			if (d.containsKey("defaultImage"))
				setDefaultImage(TiConvert.toString(proxy.getProperty("defaultImage")));
			if (d.containsKey("brokenLinkImage"))
				setBrokenLinkImage(TiConvert.toString(proxy.getProperty("brokenLinkImage")));
			if (d.containsKey("loadingIndicator"))
				setLoadingIndicator(TiConvert.toBoolean(proxy.getProperty("loadingIndicator")));
			if (d.containsKey("enableMemoryCache"))
				setMemoryCacheEnabled(TiConvert.toBoolean(proxy.getProperty("enableMemoryCache")));
		}

		public void setImage(String newImage) {
			if (newImage == null)
				return;

			image = (newImage.startsWith("http")) ? newImage : resolveUrl(null, newImage);

			proxy.getActivity().runOnUiThread(new Runnable() {
				public void run() {
					final KrollDict payload = new KrollDict();

					payload.put("image", image);

					Drawable defaultImageDrawable = (defaultImage != null) ? TiDrawableReference.fromUrl(proxy, defaultImage).getDrawable() : null;
					Drawable brokenLinkImageDrawable = (brokenLinkImage != null) ? TiDrawableReference.fromUrl(proxy, brokenLinkImage).getDrawable() : null;

					RequestListener<String, GlideDrawable> requestListener = new RequestListener<String, GlideDrawable>() {
						public boolean onException(Exception e, String model, Target<GlideDrawable> target, boolean isFirstResource) {
							if (loadingIndicatorEnabled)
								progressBar.setVisibility(View.GONE);

							if (proxy.hasListeners("error"))
								proxy.fireEvent("error", payload);

			                return false;
			            }

						public boolean onResourceReady(GlideDrawable resource, String model, Target<GlideDrawable> target, boolean isFromMemoryCache, boolean isFirstResource) {
							if (loadingIndicatorEnabled)
								progressBar.setVisibility(View.GONE);

			                if (proxy.hasListeners("load"))
								proxy.fireEvent("load", payload);

			                return false;
			            }
					};

					if (scaleType.equals(ImageviewAndroidModule.CONTENT_MODE_ASPECT_FIT))
						Glide.with(proxy.getActivity().getBaseContext()).load(image)
							 .skipMemoryCache(memoryCacheEnabled)
							 .placeholder(defaultImageDrawable)
							 .error(brokenLinkImageDrawable)
							 .fitCenter()
							 .listener(requestListener)
							 .into(imageView);
					else
						Glide.with(proxy.getActivity().getBaseContext()).load(image)
							 .skipMemoryCache(memoryCacheEnabled)
							 .placeholder(defaultImageDrawable)
							 .error(brokenLinkImageDrawable)
							 .centerCrop()
							 .listener(requestListener)
							 .into(imageView);
				}
			});
		}

		public void setScaleType(String newScaleType) {
			scaleType = newScaleType;

			if (scaleType.equals(ImageviewAndroidModule.CONTENT_MODE_ASPECT_FIT))
				imageView.setScaleType(ImageView.ScaleType.FIT_CENTER);
			else if (scaleType.equals(ImageviewAndroidModule.CONTENT_MODE_ASPECT_FILL))
				imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
		}
	}


	// Constructor
	public ImageViewProxy()
	{
		super();

		//Enabling load indicator by default
		this.loadingIndicatorEnabled = true;
	}

	@Override
	public TiUIView createView(Activity activity)
	{
		TiUIView view = new ExtendedImageView(this);

		view.getLayoutParams().autoFillsHeight = true;
		view.getLayoutParams().autoFillsWidth = true;

		return view;
	}

	protected ExtendedImageView getView()
	{
		return (ExtendedImageView)getOrCreateView();
	}

	// Handle creation options
	@Override
	public void handleCreationDict(KrollDict options)
	{
		super.handleCreationDict(options);

		if (options.containsKey("image"))
			this.image = TiConvert.toString(options.getString("image"));
		if (options.containsKey("scaleType"))
			this.scaleType = TiConvert.toString(options.getString("scaleType"));
		if (options.containsKey("defaultImage"))
			this.defaultImage = TiConvert.toString(options.getString("defaultImage"));
		if (options.containsKey("brokenLinkImage"))
			this.brokenLinkImage = TiConvert.toString(options.getString("brokenLinkImage"));
		if (options.containsKey("loadingIndicator"))
			this.loadingIndicatorEnabled = TiConvert.toBoolean(options.getBoolean("loadingIndicator"));
		if (options.containsKey("enableMemoryCache"))
			this.memoryCacheEnabled = TiConvert.toBoolean(options.getBoolean("enableMemoryCache"));
	}

	// Methods
	@Kroll.getProperty
	@Kroll.method
	public String getImage()
	{
        return this.image;
	}

	@Kroll.setProperty
	@Kroll.method
	public void setImage(String uri)
	{
	    this.image = uri;

	    getView().setImage(this.image);
	}

	@Kroll.getProperty
	@Kroll.method
	public String getContentMode()
	{
        return this.scaleType;
	}

	@Kroll.setProperty
	@Kroll.method
	public void setContentMode(String scaleType)
	{
	    this.scaleType = scaleType;

	    getView().setScaleType(scaleType);
	}

	@Kroll.getProperty
	@Kroll.method
	public String getDefaultImage()
	{
        return this.defaultImage;
	}

	@Kroll.setProperty
	@Kroll.method
	public void setDefaultImage(String defaultImage)
	{
	    this.defaultImage = defaultImage;
	}

	@Kroll.getProperty
	@Kroll.method
	public String getBrokenLinkImage()
	{
        return this.brokenLinkImage;
	}

	@Kroll.setProperty
	@Kroll.method
	public void setBrokenLinkImage(String brokenLinkImage)
	{
	    this.brokenLinkImage = brokenLinkImage;
	}

	@Kroll.getProperty
	@Kroll.method
	public Boolean getLoadingIndicator()
	{
	    return this.loadingIndicatorEnabled;
	}

	@Kroll.setProperty
	@Kroll.method
	public void setLoadingIndicator(Boolean enabled)
	{
	    this.loadingIndicatorEnabled = enabled;
	}

	@Kroll.getProperty
	@Kroll.method
	public Boolean getMemoryCacheEnabled()
	{
		return this.memoryCacheEnabled;
	}

	@Kroll.setProperty
	@Kroll.method
	public void setMemoryCacheEnabled(Boolean enabled)
	{
		this.memoryCacheEnabled = enabled;
	}
}
